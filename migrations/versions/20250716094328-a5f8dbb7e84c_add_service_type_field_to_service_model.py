"""Add service_type field to Service model

Revision ID: a5f8dbb7e84c
Revises: 7536b7d1b92e
Create Date: 2025-07-16 09:43:28.701725

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'a5f8dbb7e84c'
down_revision: Union[str, None] = '7536b7d1b92e'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('contractaccrual', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column('contractaccrual', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.add_column('service', sa.Column('service_type', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.create_index(op.f('ix_service_service_type'), 'service', ['service_type'], unique=False)
    op.create_index(op.f('ix_serviceperiod_end_date'), 'serviceperiod', ['end_date'], unique=False)
    op.create_index(op.f('ix_serviceperiod_start_date'), 'serviceperiod', ['start_date'], unique=False)
    # --- Prefill service_type for existing services ---
    connection = op.get_bind()
    
    # Minimal inlined logic for program type extraction
    def classify_service_type(service_name):
        if not service_name:
            return "UNKNOWN"
        name_lower = service_name.lower()
        if any(k in name_lower for k in ["full-stack", "fullstack", " isa "]):
            return "FS"
        if any(k in name_lower for k in ["data science", "ai/ml", "machine learning"]):
            return "DS"
        if any(k in name_lower for k in ["ciberseguridad", "cybersecurity"]):
            return "CS"
        return "UNKNOWN"

    services = connection.execute(sa.text("SELECT id, name FROM service")).fetchall()
    for service in services:
        service_type = classify_service_type(service.name)
        connection.execute(
            sa.text("UPDATE service SET service_type = :service_type WHERE id = :id"),
            {"service_type": service_type, "id": service.id}
        )
    # --- End prefill ---
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_serviceperiod_start_date'), table_name='serviceperiod')
    op.drop_index(op.f('ix_serviceperiod_end_date'), table_name='serviceperiod')
    op.drop_index(op.f('ix_service_service_type'), table_name='service')
    op.drop_column('service', 'service_type')
    op.alter_column('contractaccrual', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('contractaccrual', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)

    # ### end Alembic commands ###
