"""services

Revision ID: 2402093cc68c
Revises: 002e53430f02
Create Date: 2025-04-14 15:34:14.744320

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql


# revision identifiers, used by Alembic.
revision: str = '2402093cc68c'
down_revision: Union[str, None] = '002e53430f02'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def create_enum(name: str, values: list):
    """Create an enum type safely."""
    enum = postgresql.ENUM(*values, name=name, create_type=False)
    enum.create(op.get_bind(), checkfirst=True)
    return enum


def drop_enum(name: str):
    """Drop an enum type safely."""
    enum = postgresql.ENUM(name=name)
    enum.drop(op.get_bind(), checkfirst=True)


# Define the enum types
service_contract_status_enum = "servicecontractstatus"
service_contract_status_enum_values = ['ACTIVE', 'CANCELED']

service_period_status_enum = "serviceperiodstatus"
service_period_status_enum_values = ['ACTIVE', 'POSTPONED', 'DROPPED', 'ENDED']


def upgrade() -> None:
    """Upgrade schema."""
    # Create enums
    contract_status_enum = create_enum(
        service_contract_status_enum, service_contract_status_enum_values)
    period_status_enum = create_enum(
        service_period_status_enum, service_period_status_enum_values)

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('service',
                    sa.Column('created_at', sa.DateTime(
                        timezone=True), nullable=False),
                    sa.Column('updated_at', sa.DateTime(
                        timezone=True), nullable=False),
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column(
                        'external_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
                    sa.Column('account_identifier',
                              sqlmodel.sql.sqltypes.AutoString(), nullable=True),
                    sa.Column(
                        'name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
                    sa.Column(
                        'description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
                    sa.Column('total_sessions', sa.Integer(), nullable=False),
                    sa.Column('sessions_per_week',
                              sa.Integer(), nullable=False),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_service_account_identifier'),
                    'service', ['account_identifier'], unique=False)
    op.create_index(op.f('ix_service_external_id'),
                    'service', ['external_id'], unique=False)
    op.create_table('servicecontract',
                    sa.Column('created_at', sa.DateTime(
                        timezone=True), nullable=False),
                    sa.Column('updated_at', sa.DateTime(
                        timezone=True), nullable=False),
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('service_id', sa.Integer(), nullable=False),
                    sa.Column('client_id', sa.Integer(), nullable=False),
                    sa.Column('contract_date', sa.Date(), nullable=False),
                    sa.Column('contract_amount', sa.Float(), nullable=False),
                    sa.Column('contract_currency',
                              sqlmodel.sql.sqltypes.AutoString(), nullable=False),
                    sa.Column('accrued_amount', sa.Float(), nullable=False),
                    sa.Column('status', contract_status_enum, nullable=False),
                    sa.ForeignKeyConstraint(['client_id'], ['client.id'], ),
                    sa.ForeignKeyConstraint(['service_id'], ['service.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('serviceperiod',
                    sa.Column('created_at', sa.DateTime(
                        timezone=True), nullable=False),
                    sa.Column('updated_at', sa.DateTime(
                        timezone=True), nullable=False),
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column(
                        'external_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
                    sa.Column('contract_id', sa.Integer(), nullable=False),
                    sa.Column(
                        'name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
                    sa.Column('start_date', sa.Date(), nullable=False),
                    sa.Column('end_date', sa.Date(), nullable=False),
                    sa.Column('status', period_status_enum, nullable=False),
                    sa.ForeignKeyConstraint(
                        ['contract_id'], ['servicecontract.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_serviceperiod_end_date'),
                    'serviceperiod', ['end_date'], unique=False)
    op.create_index(op.f('ix_serviceperiod_start_date'),
                    'serviceperiod', ['start_date'], unique=False)
    op.create_index(op.f('ix_serviceperiod_status'),
                    'serviceperiod', ['status'], unique=False)
    op.add_column('invoice', sa.Column(
        'service_contract_id', sa.Integer(), nullable=True))
    op.create_foreign_key(
        'fk_invoice_service_contract_id',
        'invoice', 'servicecontract',
        ['service_contract_id'], ['id']
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('fk_invoice_service_contract_id',
                       'invoice', type_='foreignkey')
    op.drop_column('invoice', 'service_contract_id')
    op.drop_index(op.f('ix_serviceperiod_status'), table_name='serviceperiod')
    op.drop_index(op.f('ix_serviceperiod_start_date'),
                  table_name='serviceperiod')
    op.drop_index(op.f('ix_serviceperiod_end_date'),
                  table_name='serviceperiod')
    op.drop_table('serviceperiod')
    op.drop_table('servicecontract')
    op.drop_index(op.f('ix_service_external_id'), table_name='service')
    op.drop_index(op.f('ix_service_account_identifier'), table_name='service')
    op.drop_table('service')

    # Drop enums after tables that use them are dropped
    drop_enum(service_contract_status_enum)
    drop_enum(service_period_status_enum)
    # ### end Alembic commands ###
